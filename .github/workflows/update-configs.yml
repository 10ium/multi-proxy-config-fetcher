# Name: Update Proxy Configs
# This workflow automates the fetching, processing, testing, filtering,
# and deployment of proxy configurations.

on:
  # **تغییر یافته**: فقط روی رویدادهای push و pull_request به برنچ 'test' اجرا شود.
  push:
    branches:
      - test
  pull_request:
    branches:
      - test

  # **غیرفعال شده**: اجرای زمان‌بندی شده. برای فعال کردن مجدد، دو خط زیر را از حالت کامنت خارج کنید.
  # schedule:
  #   - cron: "0 */6 * * *" # Runs every 6 hours

  # اجازه اجرای دستی از رابط کاربری GitHub را می‌دهد (از طریق دکمه "Run workflow")
  workflow_dispatch:

# Permissions granted to the GITHUB_TOKEN for this workflow
permissions:
  contents: write # Needed to commit and push changes to the repository

jobs:
  update-configs:
    # Specifies the runner environment
    runs-on: ubuntu-latest # Using Ubuntu for Mihomo installation

    steps:
    - name: Checkout repository code
      # Downloads the repository code to the runner
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }} # Uses the default GitHub token for repository access

    - name: Set up Python environment
      # Sets up a Python environment on the runner
      uses: actions/setup-python@v4
      with:
        python-version: '3.x' # Uses the latest Python 3.x version

    - name: Install Python dependencies
      # Installs necessary Python libraries from requirements.txt
      run: |
        python -m pip install --upgrade pip
        pip install -r src/requirements.txt # مسیر requirements.txt در src/

    - name: Install Mihomo (Clash Core)
      # **جدید**: دانلود و نصب Mihomo (که قبلا Clash/Clash Premium/Clash Meta نامیده می‌شد)
      # برای تست پروکسی‌ها استفاده می‌شود.
      run: |
        MIHOMO_VERSION="v1.18.5" 
        MIHOMO_FILENAME="mihomo-linux-amd64-${MIHOMO_VERSION}"
        MIHOMO_URL="https://github.com/MetaCubeX/mihomo/releases/download/${MIHOMO_VERSION}/${MIHOMO_FILENAME}.gz"
        
        echo "Downloading Mihomo from: ${MIHOMO_URL}"
        curl -sL -o /tmp/${MIHOMO_FILENAME}.gz ${MIHOMO_URL}
        gzip -d /tmp/${MIHOMO_FILENAME}.gz
        sudo mv /tmp/${MIHOMO_FILENAME} /usr/local/bin/mihomo
        sudo chmod +x /usr/local/bin/mihomo
        echo "Verifying Mihomo installation:"
        mihomo -v 

    - name: Create output directories
      # Creates the new structured output directories
      run: |
        mkdir -p subs/text
        mkdir -p subs/base64
        mkdir -p subs/singbox
        mkdir -p assets 

    - name: Run Proxy Fetcher Script
      # **تغییر یافته**: اجرای اسکریپت اصلی main.py با استفاده از 'python -m'
      run: |
        # با استفاده از 'python -m src.main'، پایتون 'src' را به عنوان یک پکیج در نظر می‌گیرد
        # و ماژول‌های داخلی آن (مانند config_fetcher) را به درستی پیدا می‌کند.
        python -m src.main
      continue-on-error: true 

    - name: Convert configs to Singbox format (if still separate and in src/)
      # این گام همچنان به main.py وابسته است که باید فایل‌ها را تولید کند.
      run: python src/ConfigToSingbox.py 
      continue-on-error: true

    - name: Update README timestamps and stats
      run: |
        timestamp=$(date +%s)
        sed -i "s/protocol_distribution_chart\.svg?v=[0-9]*/protocol_distribution_chart.svg?v=$timestamp/" README.md
        sed -i "s/performance_report\.html?v=[0-9]*/performance_report.html?v=$timestamp/" README.md
        sed -i "s/protocol_distribution_chart\.svg?v=[0-9]*/protocol_distribution_chart.svg?v=$timestamp/" README_FA.md
        sed -i "s/performance_report\.html?v=[0-9]*/performance_report.html?v=$timestamp/" README_FA.md
        sed -i "s/protocol_distribution_chart\.svg?v=[0-9]*/protocol_distribution_chart.svg?v=$timestamp/" README_CN.md
        sed -i "s/performance_report\.html?v=[0-9]*/performance_report.html?v=$timestamp/" README_CN.md
        sed -i "s/protocol_distribution_chart\.svg?v=[0-9]*/protocol_distribution_chart.svg?v=$timestamp/" README_RU.md
        sed -i "s/performance_report\.html?v=[0-9]*/performance_report.html?v=$timestamp/" README_RU.md
      continue-on-error: true

    - name: Setup Git user
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'

    - name: Commit and push changes
      run: |
        git add subs/text/*.txt
        git add subs/base64/*.txt
        git add subs/singbox/*.json 
        git add subs/channel_stats.json 
        git add assets/protocol_distribution_chart.svg
        git add assets/performance_report.html
        git add README.md
        git add README_FA.md
        git add README_CN.md
        git add README_RU.md
        git commit -m "Update proxy configs, stats and reports" || echo "No changes to commit"
        git push
